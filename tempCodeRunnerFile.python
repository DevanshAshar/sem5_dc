import random
from secrets import choice

splits = 0
parent_splits = 0
fusions = 0
parent_fusions = 0


class Node(object):
    def __init__(self, parent=None):
        self.keys: list = []
        self.values: list[Node] = []
        self.parent: Node = parent

    def index(self, key):
        for i, item in enumerate(self.keys):
            if key < item:
                return i
        return len(self.keys)

    def __getitem__(self, item):
        return self.values[self.index(item)]

    def __setitem__(self, key, value):
        i = self.index(key)
        self.keys[i:i] = [key]
        self.values.pop(i)
        self.values[i:i] = value

    def split(self):
        global splits, parent_splits
        splits += 1
        parent_splits += 1
        left = Node(self.parent)
        mid = len(self.keys) // 2
        left.keys = self.keys[:mid]
        left.values = self.values[:mid + 1]
        for child in left.values:
            child.parent = left
        key = self.keys[mid]
        self.keys = self.keys[mid + 1:]
        self.values = self.values[mid + 1:]
        return key, [left, self]


class Leaf(Node):
    def __init__(self, parent=None, prev_node=None, next_node=None):
        super(Leaf, self).__init__(parent)
        self.next: Leaf = next_node
        if next_node is not None:
            next_node.prev = self
        self.prev: Leaf = prev_node
        if prev_node is not None:
            prev_node.next = self

    def __getitem__(self, item):
        return self.values[self.keys.index(item)]

    def __setitem__(self, key, value):
        i = self.index(key)
        if key not in self.keys:
            self.keys[i:i] = [key]
            self.values[i:i] = [value]
        else:
            self.values[i - 1] = value

    def split(self):
        global splits
        splits += 1
        left = Leaf(self.parent, self.prev, self)
        mid = len(self.keys) // 2
        left.keys = self.keys[:mid]
        left.values = self.values[:mid]
        self.keys: list = self.keys[mid:]
        self.values: list = self.values[mid:]
        return self.keys[0], [left, self]


class BPlusTree(object):
    root: Node

    def __init__(self, maximum=4):
        self.root = Leaf()
        self.maximum: int = maximum if maximum > 2 else 2
        self.minimum: int = self.maximum // 2
        self.depth = 0

    def find(self, key) -> Leaf:
        node = self.root
        while type(node) is not Leaf:
            node = node[key]
        return node

    def __getitem__(self, item):
        return self.find(item)[item]

    def query(self, key):
        leaf = self.find(key)
        return leaf[key] if key in leaf.keys else None

    def change(self, key, value):
        leaf = self.find(key)
        if key not in leaf.keys:
            return False, leaf
        else:
            leaf[key] = value
            return True, leaf

    def __setitem__(self, key, value, leaf=None):
        if leaf is None:
            leaf = self.find(key)
        leaf[key] = value
        if len(leaf.keys) > self.maximum:
            self.insert_index(*leaf.split())

    def insert(self, key, value):
        leaf = self.find(key)
        if key in leaf.keys:
            return False, leaf
        else:
            self.__setitem__(key, value, leaf)
            return True, leaf

    def insert_index(self, key, values: list[Node]):
        parent = values[1].parent
        if parent is None:
            values[0].parent = values[1].parent = self.root = Node()
            self.depth += 1
            self.root.keys = [key]
            self.root.values = values
            return
        parent[key] = values
        if len(parent.keys) > self.maximum:
            self.insert_index(*parent.split())

    def show(self, node=None, file=None, _prefix="", _last=True):
        if node is None:
            node = self.root
        print(_prefix, "`- " if _last else "|- ", node.keys, sep="", file=file)
        _prefix += " " if _last else "| "
        if type(node) is Node:
            for i, child in enumerate(node.values):
                _last = (i == len(node.values) - 1)
                self.show(child, file, _prefix, _last)


def demo():
    bplustree = BPlusTree()
    flag = True
    while flag:
        print("\n******** B+ Tree ********")
        print("1.Insert")
        print("2.Search")
        print("3.Show Tree")
        print("4.Exit")
        n = int(input("Enter Your Choice : "))
        if n == 1:
            value = int(input("Enter Element to Insert : "))
            bplustree[value] = value
        elif n == 2:
            value = int(input("Enter Element to Search : "))
            ans = bplustree.find(value)
            if ans.values:
                print("Value found in the tree")
            else:
                print("Value not found in the tree")
        elif n == 3:
            bplustree.show()
        elif n == 4:
            flag = False
            break
        else:
            flag = False
            break


if __name__ == '__main__':
    demo()
