import random

gene = ['01101','11000', '01000', '10011']

def selection(gene):
    x = [int(i,2) for i in gene]
    fx = [i*i for i in x]
    fx_sum = sum(fx)
    fx_avg = sum(fx)/len(gene)
    exp_count = [round(i/fx_avg,5) for i in fx]
    actual_count = [round(i) for i in exp_count]

    mate_pool = []
    
    for i,g in zip(actual_count,gene):
        if i:
            for j in range(i):
                mate_pool.append(g)
                
    for i in range(len(gene)):
        print(x[i],fx[i],exp_count[i],actual_count[i],mate_pool[i])
        
    return crossover(mate_pool)

def crossover(mate_pool):
    mate = [1,0,3,2]
    crossover_pt =[4,4,2,2]
    new_p = [-1]*len(mate_pool)
    for i in mate:
        new_p[i] = mate_pool[i][:crossover_pt[i]] +mate_pool[mate[i]][crossover_pt[i]:]
    
    x = [int(i,2) for i in new_p]
    fx = [i*i for i in x]
    for i in range(len(mate_pool)):
        print(mate_pool[i],mate[i],crossover_pt[i],new_p[i],x[i],fx[i])
    # print(new_p)
    return new_p
        
        
def ga(gene,iter,n):
    if iter <n:
        print('iteration',iter)
        gene = selection(gene)
        ga(gene,iter+1,n)
    

# ga(gene,0,3)

def gen_pairs(n):
    if n%2 ==0:
        avail_pos = list(range(n))
        # random.s
        mate = [-1] *n
        for i in range(n):
            if mate[i]== -1:
                j = random.choice(avail_pos)
                while mate[i]!= -1 or i ==j:
                    j=random.choice(avail_pos)
                mate[i] = j
                mate[j] = i
                avail_pos.remove(i)
                avail_pos.remove(j)
        print(mate)
    # return mate

gen_pairs(4)
                