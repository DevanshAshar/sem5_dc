graph = {
  'A': ['B', 'C'],
  'B': ['A','D','E'],
  'C': ['A','F','G'],
  'D': [],
  'E': [],
  'F': ['H','I'],
  'G': [],
  'H': [],
  'I': []
}

def dfid(graph,start_node,goal_node,depth):
    for i in range(depth):
        print('depth',i)
        dfs(graph,[],[],[],start_node,goal_node,0,i)
    

def dfs(graph,vis,non_vis,path,curr_node,goal,depth,max_depth):
    if depth <=max_depth:
        if curr_node not in vis:
            vis.append(curr_node)
            path.append(curr_node)
            non_vis = [i for i in graph.keys() if i not in vis]
            if curr_node == goal:
                print(f"{vis}\t\t{non_vis}\t\tFalse")
                print('path found')
                print(path)
                exit()
            print(f"{vis}\t\t{non_vis}\t\tFalse")
            for i in graph[curr_node]:
                dfs(graph,vis,non_vis,path,i,goal,depth+1,max_depth)
        
dfid(graph,'A','I',4)